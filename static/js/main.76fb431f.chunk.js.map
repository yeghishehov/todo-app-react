{"version":3,"sources":["components/Input/Input.js","components/FilteringOptions/FilteringOptions.js","components/Todo/Todo.js","serviceWorker.js","index.js"],"names":["Input","props","onInputChange","value","target","console","groupCollapsed","log","groupEnd","setState","todoValue","handleSubmit","onTodoAdd","state","handleKeyDown","e","key","placeholder","this","onChange","onKeyDown","onClick","React","Component","FILTER_STATES","FilteringOptions","filter","onFilter","className","Todo","todos","id","currentId","name","isComplete","onTodoSelect","activeId","map","todo","isEdit","onTodoEdit","onItemInputChange","onItemKeyPress","isEnter","getFilteredTodos","normalizedTodos","localStorage","getItem","JSON","parse","setItem","stringify","type","defaultChecked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76fb431f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      todoValue: \"\",\r\n      placeholder: \"Add Todo\"\r\n    };\r\n  }\r\n\r\n  onInputChange = ({ target: { value } }) => {\r\n    console.groupCollapsed(\"ON_INPUT_CHANGE\");\r\n    console.log(`value: ${value}`);\r\n    console.groupEnd();\r\n    this.setState({\r\n      todoValue: value\r\n    });\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    this.props.onTodoAdd(this.state.todoValue);\r\n    this.setState({\r\n      todoValue: \"\"\r\n    });\r\n  };\r\n\r\n  handleKeyDown = e => {\r\n    if (e.key === 'Enter'){\r\n      this.handleSubmit();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { placeholder, todoValue } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <input\r\n          placeholder={placeholder}\r\n          value={todoValue}\r\n          onChange={this.onInputChange}\r\n          onKeyDown={this.handleKeyDown}\r\n        />\r\n        <button onClick={this.handleSubmit}>Add</button>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst FILTER_STATES = {\r\n  all: \"All\",\r\n  active: \"active\",\r\n  completed: \"completed\"\r\n};\r\n\r\nexport default function FilteringOptions({ filter, onFilter }) {\r\n  return (\r\n    <div>\r\n      <button\r\n        className={filter === FILTER_STATES.all ? \"select\" : \"\"}\r\n        onClick={() => onFilter(FILTER_STATES.all)}\r\n      >\r\n        All\r\n      </button>\r\n      <button\r\n        className={filter === FILTER_STATES.active ? \"select\" : \"\"}\r\n        onClick={() => onFilter(FILTER_STATES.active)}\r\n      >\r\n        Active\r\n      </button>\r\n      <button\r\n        className={filter === FILTER_STATES.completed ? \"select\" : \"\"}\r\n        onClick={() => onFilter(FILTER_STATES.completed)}\r\n      >\r\n        Completed\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Input from \"../Input/Input\";\r\n\r\nimport \"./todo.css\";\r\nimport FilteringOptions from \"../FilteringOptions/FilteringOptions\";\r\n\r\nconst FILTER_STATES = {\r\n  all: \"All\",\r\n  active: \"active\",\r\n  completed: \"completed\"\r\n};\r\n\r\nexport default class Todo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = localStorage.getItem('state') \r\n              ? JSON.parse(localStorage.getItem('state')) \r\n              : {\r\n                  todos: [],\r\n                  currentId: 1,\r\n                  filter: FILTER_STATES.all\r\n                };\r\n  }\r\n\r\n  onTodoAdd = todoValue => {\r\n    this.setState(state => ({\r\n      todos: [\r\n        ...state.todos,\r\n        { id: state.currentId, name: todoValue, isComplete: false }\r\n      ],\r\n      currentId: state.currentId + 1\r\n    }));\r\n  };\r\n\r\n  onTodoSelect = activeId => {\r\n    this.setState(state => ({\r\n      todos: state.todos.map(todo =>\r\n        todo.id === activeId\r\n          ? { ...todo, isComplete: !todo.isComplete, isEdit: false }\r\n          : todo\r\n      )\r\n    }));\r\n  };\r\n\r\n  onTodoEdit = activeId => {\r\n    this.setState(state => ({\r\n      todos: state.todos.map(todo =>\r\n        todo.id === activeId ? { ...todo, isEdit: true } : todo\r\n      )\r\n    }));\r\n  };\r\n\r\n  onItemInputChange = (id, e) => {\r\n    const { value } = e.target;\r\n\r\n    this.setState(state => ({\r\n      todos: state.todos.map(todo =>\r\n        todo.id === id ? { ...todo, name: value } : todo\r\n      )\r\n    }));\r\n  };\r\n\r\n  onItemKeyPress = (id, e) => {\r\n    const isEnter = e.key === \"Enter\";\r\n\r\n    this.setState(state => ({\r\n      todos: state.todos.map(todo =>\r\n        todo.id === id\r\n          ? { ...todo, isEdit: isEnter ? false : todo.isEdit }\r\n          : todo\r\n      )\r\n    }));\r\n  };\r\n\r\n  onFilter = filter => {\r\n    this.setState({\r\n      filter\r\n    });\r\n  };\r\n\r\n  getFilteredTodos = (todos, filter) => {\r\n    let normalizedTodos = todos;\r\n\r\n    if (filter === FILTER_STATES.completed) {\r\n      normalizedTodos = todos.filter(todo => todo.isComplete);\r\n    } else if (filter === FILTER_STATES.active) {\r\n      normalizedTodos = todos.filter(todo => !todo.isComplete);\r\n    }\r\n\r\n    return normalizedTodos;\r\n  };\r\n\r\n  render() {\r\n    const { todos, filter } = this.state;\r\n    const normalizedTodos = this.getFilteredTodos(todos, filter);\r\n    localStorage.setItem('state', JSON.stringify(this.state));\r\n\r\n    return (\r\n      <div>\r\n        <h1>Todo</h1>\r\n        <Input onTodoAdd={this.onTodoAdd} />\r\n        <section>\r\n          <ul>\r\n            {normalizedTodos.map(({ name, id, isComplete, isEdit }) => (\r\n              <li key={id} className={isComplete ? \"checked\" : \"\"}>\r\n                <input type=\"checkbox\" onClick={() => this.onTodoSelect(id)} defaultChecked = {isComplete ? \"checked\" : \"\"}/>\r\n\r\n                {isEdit ? (\r\n                  <input\r\n                    value={name}\r\n                    onChange={e => this.onItemInputChange(id, e)}\r\n                    onKeyDown={e => this.onItemKeyPress(id, e)}\r\n                  />\r\n                ) : (\r\n                  <span onClick={() => this.onTodoEdit(id)}>{name}</span>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </section>\r\n        <FilteringOptions filter={filter} onFilter={this.onFilter} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Todo from \"./components/Todo/Todo\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Todo />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}